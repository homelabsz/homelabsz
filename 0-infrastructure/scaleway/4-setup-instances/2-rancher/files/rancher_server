#!/bin/bash
set -x

export curlimage=appropriate/curl
export jqimage=stedolan/jq

echo "393216" > /proc/sys/net/netfilter/nf_conntrack_max

# Verify commands
if [ `command -v curl` ]; then
  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
elif [ `command -v wget` ]; then
  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
fi

# Install Scaleway CLI
curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh

for image in $curlimage $jqimage "rancher/rancher:${rancher_version}"; do
  until docker inspect $image > /dev/null 2>&1; do
    docker pull $image && sleep 2
  done
done

docker run -d --restart=unless-stopped \
    -p 80:80 -p 443:443 \
    --privileged \
    -v /opt/rancher:/var/lib/rancher \
    --name rancher-server rancher/rancher:${rancher_version}

while true; do
  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping && sleep 10 && break
done

export ADMIN_PASSWORD=$(docker logs rancher-server 2>&1 | grep "Bootstrap Password:" | awk '{ print $NF }')

# Login
while true; do
    LOGINRESPONSE=$(docker run \
        --rm \
        --net=host \
        $curlimage \
        -s "https://127.0.0.1/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"'"$${ADMIN_PASSWORD}"'"}' --insecure)
    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)
    echo "Login Token is $LOGINTOKEN"
    if [ "$LOGINTOKEN" != "null" ]; then
        break
    else
        sleep 5
    fi
done

# Change password
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"'"$${ADMIN_PASSWORD}"'","newPassword":"${admin_password}"}' --insecure

# Create API key
while true; do
    APIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"API Ken generated by Terraform in rancher setup"}' --insecure)
    if [ "x$APIRESPONSE" = "x" ]; then
        continue
    fi

    # Extract and store token
    APITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`
    if [ "x$APITOKEN" != "x" ]; then
        break
    else
        sleep 5
    fi
done

# Configure server-url
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X PUT --data-binary '{"name":"server-url","value":"${rancher_server_url}"}' --insecure

# Setup Scaleway init
mkdir -p /files && touch /files/script.sh
cat << EOF > /files/script.sh
apk add jq

/scw init access-key=${scw_access_key} secret-key=${scw_secret_key} organization-id=${scw_organization_id} project-id=${scw_project_id} send-telemetry=false install-autocomplete=false with-ssh-key=false

FILTER_SECRET=\$(/scw secret secret list | grep rancher_api_token)
if [ -z "\$FILTER_SECRET" ]; then
  echo "The Rancher API secret token doesn't exist. Create it"
  SECRET_ID=\$(/scw secret secret create name=rancher_api_token --output=json | jq .id)
  /scw secret version create secret-id=\$SECRET_ID data=$APITOKEN --output=json
else
  echo "The Rancher API secret token already exists. Remove and recreate"
  SECRET_ID=\$(echo \$FILTER_SECRET | awk '{print $1}')
  /scw secret secret delete secret-id=\$SECRET_ID
  SECRET_ID=\$(/scw secret secret create name=rancher_api_token --output=json | jq .id)
  /scw secret version create secret-id=\$SECRET_ID data=$APITOKEN --output=json
fi
EOF
cat /files/script.sh

docker run --rm --volume=/files:/files --entrypoint "/bin/bash" scaleway/cli:2.20 /files/script.sh
